AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda + API Gateway (REST) sample
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-LambdaExecRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: LambdaBasicPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: my-lambda-function-cfn
      Runtime: python3.11
      Handler: app.lambda_handler
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Code:
        ZipFile: "import json\nimport logging\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\
          \ndef lambda_handler(event, context):\n    logger.info(\"Event received:\
          \ %s\", event)\n    return {\n        \"statusCode\": 200,\n        \"body\"\
          : json.dumps(\"Hello from Lambda via CloudFormation!\")\n    }\n"
      Timeout: 10
      MemorySize: 128
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MyApiFromCFN
      Description: REST API for Lambda created by CloudFormation
  ApiGatewayResourceRoot:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: ApiGatewayRestApi
      ParentId:
        Fn::GetAtt:
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: myLambdaFunction
  ApiGatewayMethodGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: ApiGatewayRestApi
      ResourceId:
        Ref: ApiGatewayResourceRoot
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction.Arn}/invocations
  LambdaPermissionForApi:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: MyLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/*/myLambdaFunction
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: ApiGatewayRestApi
    DependsOn:
    - ApiGatewayMethodGet
  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: dev
      RestApiId:
        Ref: ApiGatewayRestApi
      DeploymentId:
        Ref: ApiDeployment
Outputs:
  ApiUrl:
    Description: Invoke URL
    Value:
      Fn::Sub: https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/dev/myLambdaFunction
